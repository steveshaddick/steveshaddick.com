Cookie = {
    get: function(a) {
        tmp = document.cookie.match(new RegExp(a + "=[a-zA-Z0-9.()=|%/]+($|;)", "g"));
        if (!tmp || !tmp[0]) return null; else return unescape(tmp[0].substring(a.length + 1, tmp[0].length).replace(";", "")) || null;
    },
    set: function(a, b, c, d, e, f) {
        cookie = [ a + "=" + escape(b), "path=" + (!d || d == "" ? "/" : d), "domain=" + (!e || e == "" ? window.location.hostname : e) ];
        if (c) cookie.push(Cookie.hoursToExpireDate(c));
        if (f) cookie.push("secure");
        return document.cookie = cookie.join("; ");
    },
    unset: function(a, b, c) {
        b = !b || typeof b != "string" ? "" : b;
        c = !c || typeof c != "string" ? "" : c;
        if (Cookie.get(a)) Cookie.set(a, "", "Thu, 01-Jan-70 00:00:01 GMT", b, c);
    },
    hoursToExpireDate: function(a) {
        if (parseInt(a) == "NaN") return ""; else {
            now = new Date();
            now.setTime(now.getTime() + parseInt(a) * 60 * 60 * 1e3);
            return now.toGMTString();
        }
    },
    test: function() {
        Cookie.set("b49f729efde9b2578ea9f00563d06e57", "true");
        if (Cookie.get("b49f729efde9b2578ea9f00563d06e57") == "true") {
            Cookie.unset("b49f729efde9b2578ea9f00563d06e57");
            return true;
        }
        return false;
    },
    dump: function() {
        if (typeof console != "undefined") {
            console.log(document.cookie.split(";"));
        }
    }
};

var SimpleVideoEventHandler = function() {
    var a = [];
    function b(b, c) {
        a[b] = c;
    }
    function c(b, c, d) {
        a[b].flashEvent(c, d);
    }
    function d(b) {
        a[b.data.id].htmlEvent(b);
    }
    return {
        addPlayer: b,
        flashEvent: c,
        htmlEvent: d
    };
}();

function SimpleVideo(a, b) {
    this.$element = $("#" + a);
    this.$video = null;
    this.$flash = null;
    this.flashId = null;
    this.solution = "";
    this.firstLoad = false;
    this.controller = null;
    this.hideTimeout = null;
    this.isOver = false;
    this.controlsActive = false;
    this.isPlaying = false;
    this.videoPoster = "";
    this.audioPoster = "";
    this.isVideo = true;
    this.state = "nomedia";
    this.canScrub = true;
    this.objConfig = {
        defaultVolume: typeof b.defaultVolume != "undefined" ? b.defaultVolume : .8,
        nativeControls: typeof b.nativeControls != "undefined" ? b.nativeControls : false,
        allowFullscreen: typeof b.allowFullscreen != "undefined" ? b.allowFullscreen : true,
        trueFullscreen: typeof b.trueFullscreen != "undefined" ? b.trueFullscreen : true,
        onFullscreen: typeof b.onFullscreen != "undefined" ? b.onFullscreen : null,
        onNormalscreen: typeof b.onNormalscreen != "undefined" ? b.onNormalscreen : null,
        posterPath: typeof b.posterPath != "undefined" ? b.posterPath : ""
    };
    this.volume = this.objConfig.defaultVolume;
    if (!!document.createElement("video").canPlayType) {
        this.solution = "html";
    } else {
        this.solution = "flash";
    }
    if (this.solution == "html") {
        $(".sv_flashContainer", this.$element).remove();
        this.controller = new HTMLController(this);
    } else {
        $(".sv_video", this.$element).remove();
        this.controller = new FlashController(this);
    }
    if (this.controller.valid === false) {
        this.solution = false;
        return;
    }
    SimpleVideoEventHandler.addPlayer(a, this.controller);
    this.videoPoster = $(".sv_videoPoster", this.$element).attr("src");
    this.audioPoster = $(".sv_audioOlny", this.$element).attr("src");
    if (this.objConfig.nativeControls) {
        this.controller.setPoster(this.videoPoster);
        $(".sv_display", this.$element).remove();
        return;
    }
    this.$display = $(".sv_display", this.$element);
    this.$buffering = $(".sv_buffering", this.$element);
    this.$audioOnly = $(".sv_audioOnly", this.$element);
    this.$poster = $(".sv_videoPoster", this.$element);
    this.$controls = $(".sv_controls", this.$element);
    this.$restartButton = $(".sv_restart", this.$element);
    this.$playButton = $(".sv_play", this.$element);
    this.$pauseButton = $(".sv_pause", this.$element);
    this.$muteButton = $(".sv_mute", this.$element);
    this.$unmuteButton = $(".sv_unmute", this.$element);
    this.$volumeSlider = $(".sv_vslider", this.$element);
    this.$volumeMarker = $(".sv_vmarker", this.$element);
    this.$volumeMaxButton = $(".sv_vmax", this.$element);
    this.$fullscreenButton = $(".sv_fullscreen", this.$element);
    this.$normalscreenButton = $(".sv_normalscreen", this.$element);
    if (!this.objConfig.allowFullscreen) {
        this.$fullscreenButton.addClass("inactive");
        this.$normalscreenButton.addClass("inactive");
    }
    this.$loadProgress = $(".sv_loaded", this.$element);
    this.$playProgress = $(".sv_playhead", this.$element);
    this.$scrubber = $(".sv_scrubber", this.$element);
    this.bindListeners();
    var c = this;
    if (fullScreenApi.supportsFullScreen && this.objConfig.trueFullscreen) {
        $(window).bind("fullscreen-off", function(a) {
            c.normalscreen();
        });
    }
    this.setState("volume", {
        volume: this.volume
    });
}

SimpleVideo.prototype.bindListeners = function() {
    var a = this;
    this.$element.hover(function() {
        a.showControls();
    }, function() {
        a.setHide(800);
    });
    this.$element.mousemove(function() {
        if (!a.controlsActive) {
            a.controlsActive = true;
            a.$controls.removeClass("inactive").addClass("active");
            a.setHide(2500);
        }
    });
    this.$display.click(function() {
        if (a.isPlaying) {
            a.pause();
        } else {
            a.play();
        }
    });
    this.$controls.hover(function() {
        a.setHide(8e3);
    }, function() {
        a.setHide(2500);
    });
    this.$restartButton.click(function() {
        a.restart();
    });
    this.$playButton.click(function() {
        a.play();
    });
    this.$pauseButton.click(function() {
        a.pause();
    });
    this.$muteButton.click(function() {
        a.mute();
    });
    this.$unmuteButton.click(function() {
        a.unmute();
    });
    this.$volumeMaxButton.click(function() {
        a.maxVolume();
    });
    this.$volumeSlider.click(function(b) {
        a.vSliderClick(b);
    });
    this.$scrubber.click(function(b) {
        a.scrubberClick(b);
    });
    this.$fullscreenButton.click(function() {
        a.fullscreen();
    });
    this.$normalscreenButton.click(function() {
        a.normalscreen();
    });
    this.controller.bindListeners();
};

SimpleVideo.prototype.breakListeners = function() {
    this.$element.unbind();
    this.$display.unbind();
    this.$controls.unbind();
    this.$restartButton.unbind();
    this.$playButton.unbind();
    this.$pauseButton.unbind();
    this.$muteButton.unbind();
    this.$unmuteButton.unbind();
    this.$volumeMaxButton.unbind();
    this.$volumeSlider.unbind();
    this.$fullscreenButton.unbind();
    this.$normalscreenButton.unbind();
    this.controller.breakListeners();
};

SimpleVideo.prototype.init = function(a) {
    if (this.initializing) return;
    this.initializing = true;
    this.controller.init(a);
};

SimpleVideo.prototype.setState = function(a, b) {
    if (!this.solution) return;
    if (this.objConfig.nativeControls) return;
    if (!this.firstLoad && a != "volume") {
        a = "nomedia";
    }
    switch (a) {
      case "nomedia":
        this.$buffering.removeClass("active").addClass("inactive");
        this.$poster.removeClass("inactive");
        this.state = a;
        break;

      case "buffering":
        this.$poster.addClass("inactive");
        this.$buffering.removeClass("inactive").addClass("active");
        this.state = a;
        break;

      case "playing":
        this.isPlaying = true;
        this.$buffering.removeClass("active").addClass("inactive");
        this.$pauseButton.removeClass("inactive").addClass("active");
        this.$playButton.removeClass("active").addClass("inactive");
        this.state = a;
        break;

      case "paused":
        this.isPlaying = false;
        this.$pauseButton.removeClass("active").addClass("inactive");
        this.$playButton.removeClass("inactive").addClass("active");
        this.state = a;
        break;

      case "volume":
        this.volume = b.volume;
        if (this.volume == 0) {
            this.$unmuteButton.removeClass("inactive").addClass("active");
            this.$muteButton.removeClass("active").addClass("inactive");
        } else {
            this.$unmuteButton.removeClass("active").addClass("inactive");
            this.$muteButton.removeClass("inactive").addClass("active");
        }
        this.$volumeMarker[0].style.width = parseInt(this.volume * 100) + "%";
        break;

      case "load_progress":
        this.$loadProgress[0].style.width = parseInt(b.percent * 100) + "%";
        break;

      case "play_progress":
        if (this.state == "buffering") {
            this.$buffering.removeClass("active").addClass("inactive");
        }
        this.$playProgress[0].style.width = parseInt(b.percent * 100) + "%";
        break;

      case "fullscreen":
        this.breakListeners();
        this.bindListeners();
        this.$element.addClass("fullscreen");
        this.$fullscreenButton.removeClass("active").addClass("inactive");
        this.$normalscreenButton.removeClass("inactive").addClass("active");
        if (this.objConfig.onFullscreen) {
            this.objConfig.onFullscreen();
        }
        if (this.isPlaying) {
            this.play();
        }
        break;

      case "normalscreen":
        this.breakListeners();
        this.bindListeners();
        this.$element.removeClass("fullscreen");
        this.$fullscreenButton.removeClass("inactive").addClass("active");
        this.$normalscreenButton.removeClass("active").addClass("inactive");
        if (this.objConfig.onNormalscreen) {
            this.objConfig.onNormalscreen();
        }
        if (this.isPlaying) {
            this.play();
        }
        break;
    }
};

SimpleVideo.prototype.showControls = function() {
    if (!this.solution || this.state == "nomedia") return;
    this.isOver = true;
    this.controlsActive = true;
    this.$controls.removeClass("inactive").addClass("active");
    if (this.isVideo) {
        this.setHide(2500);
    }
};

SimpleVideo.prototype.hideControls = function() {
    if (!this.solution || !this.isVideo) return;
    this.isOver = false;
    this.controlsActive = false;
    this.$controls.removeClass("active").addClass("inactive");
};

SimpleVideo.prototype.setHide = function(a) {
    if (!this.solution || !this.isVideo) return;
    clearTimeout(this.hideTimeout);
    var b = this;
    this.hideTimeout = setTimeout(function() {
        b.hideControls();
    }, a);
};

SimpleVideo.prototype.setFile = function(a, b) {
    if (!this.solution) return;
    if (typeof b == "undefined") b = false;
    this.firstLoad = true;
    this.controller.setFile(a);
    this.isVideo = !b;
    if (!this.objConfig.nativeControls) {
        if (b) {
            this.$audioOnly.removeClass("inactive");
            this.showControls();
        } else {
            this.$audioOnly.addClass("inactive");
            this.hideControls();
        }
        this.$loadProgress[0].style.width = this.$playProgress[0].style.width = 0;
    } else {
        if (b) {
            this.controller.setPoster(this.audioPoster);
        } else {
            this.controller.setPoster(this.audioPoster);
        }
    }
};

SimpleVideo.prototype.setHasAudio = function(a) {
    if (a) {
        this.$element.removeClass("no-audio");
    } else {
        this.$element.addClass("no-audio");
    }
};

SimpleVideo.prototype.setScrub = function(a) {
    this.canScrub = a;
};

SimpleVideo.prototype.play = function() {
    if (!this.solution) return;
    this.controller.play();
};

SimpleVideo.prototype.pause = function() {
    if (!this.solution) return;
    this.controller.pause();
};

SimpleVideo.prototype.restart = function() {
    if (!this.solution) return;
    this.setHide(2500);
    this.controller.seek(0);
};

SimpleVideo.prototype.clear = function() {
    if (!this.solution) return;
    this.controller.clear();
};

SimpleVideo.prototype.setRepeat = function(a) {
    if (!this.solution) return;
    this.controller.setRepeat(a);
};

SimpleVideo.prototype.mute = function() {
    if (!this.solution) return;
    this.controller.setMute(true);
};

SimpleVideo.prototype.unmute = function() {
    if (!this.solution) return;
    this.controller.setMute(false);
};

SimpleVideo.prototype.maxVolume = function() {
    if (!this.solution) return;
    this.controller.setVolume(1);
};

SimpleVideo.prototype.vSliderClick = function(a) {
    if (!this.solution) return;
    this.controller.setVolume((a.pageX - this.$volumeSlider.offset().left) / this.$volumeSlider.width());
};

SimpleVideo.prototype.scrubberClick = function(a) {
    if (!this.solution || !this.canScrub) return;
    this.controller.seek((a.pageX - this.$scrubber.offset().left) / this.$scrubber.width());
};

SimpleVideo.prototype.fullscreen = function() {
    if (!this.solution || this.state == "nomedia") return;
    if (fullScreenApi.supportsFullScreen && this.objConfig.trueFullscreen) {
        fullScreenApi.requestFullScreen(this.$element[0]);
    } else {
        this.$swapDiv = $("<div>Fullscreen</div>");
        this.$element.replaceWith(this.$swapDiv);
        $("body").append(this.$element);
        var a = this;
        $(document).bind("keyup.sv", function(b) {
            if (b.keyCode == 27) {
                a.normalscreen();
            }
        });
    }
    this.controller.setFullscreen(true);
};

SimpleVideo.prototype.normalscreen = function() {
    if (fullScreenApi.supportsFullScreen && this.objConfig.trueFullscreen) {
        fullScreenApi.cancelFullScreen();
    } else {
        this.$swapDiv.replaceWith(this.$element);
        this.$swapDiv = null;
        $(document).unbind("keyup.sv");
    }
    this.controller.setFullscreen(false);
};

function HTMLController(a) {
    this.sv = a;
    this.$video = $(".sv_video", a.$element);
    this.htmlVolume = a.volume;
    this.loop = false;
    this.$video[0].controls = false;
    this.valid = true;
}

HTMLController.prototype.bindListeners = function() {
    var a = {
        id: this.sv.$element[0].id
    };
    this.$video.bind("play", a, SimpleVideoEventHandler.htmlEvent);
    this.$video.bind("pause", a, SimpleVideoEventHandler.htmlEvent);
    this.$video.bind("ended", a, SimpleVideoEventHandler.htmlEvent);
    this.$video.bind("volumechange", a, SimpleVideoEventHandler.htmlEvent);
    this.$video.bind("progress", a, SimpleVideoEventHandler.htmlEvent);
    this.$video.bind("timeupdate", a, SimpleVideoEventHandler.htmlEvent);
    this.$video.bind("abort", a, SimpleVideoEventHandler.htmlEvent);
    this.$video.bind("error", a, SimpleVideoEventHandler.htmlEvent);
    this.$video.bind("loadstart", a, SimpleVideoEventHandler.htmlEvent);
    this.$video.bind("stalled", a, SimpleVideoEventHandler.htmlEvent);
    this.$video.bind("playing", a, SimpleVideoEventHandler.htmlEvent);
    this.$video.bind("waiting", a, SimpleVideoEventHandler.htmlEvent);
};

HTMLController.prototype.breakListeners = function() {
    this.$video.unbind();
};

HTMLController.prototype.init = function(a) {
    a();
};

HTMLController.prototype.htmlEvent = function(a) {
    if (a.type != "timeupdate") {}
    switch (a.type) {
      case "abort":
        this.sv.setState("nomedia");
        break;

      case "stalled":
        break;

      case "waiting":
      case "loadstart":
        this.sv.setState("buffering");
        break;

      case "playing":
      case "play":
        this.sv.setState("playing");
        break;

      case "pause":
        this.sv.setState("paused");
        break;

      case "volumechange":
        this.sv.setState("volume", {
            volume: this.$video[0].volume
        });
        break;

      case "ended":
        if (this.loop) {
            this.play();
        } else {
            this.seek(0);
            this.pause();
        }
        break;

      case "progress":
        var b = 0;
        if (this.$video[0].buffered && this.$video[0].buffered.length > 0 && this.$video[0].buffered.end && this.$video[0].duration) {
            b = this.$video[0].buffered.end(0) / this.$video[0].duration;
        } else if (this.$video[0].bytesTotal != undefined && this.$video[0].bytesTotal > 0 && this.$video[0].bufferedBytes != undefined) {
            b = this.$video[0].bufferedBytes / this.$video[0].bytesTotal;
        }
        this.sv.setState("load_progress", {
            percent: b
        });
        break;

      case "timeupdate":
        this.sv.setState("play_progress", {
            percent: this.$video[0].currentTime / this.$video[0].duration
        });
        break;
    }
};

HTMLController.prototype.setFile = function(a) {
    for (var b = 0, c = a.length; b < c; b++) {
        if (this.$video[0].canPlayType(a[b].type) != "") {
            this.$video[0].src = a[b].src;
            break;
        }
    }
    this.$video[0].controls = this.sv.objConfig.nativeControls;
};

HTMLController.prototype.setPoster = function(a) {
    this.$video.attr("poster", a);
};

HTMLController.prototype.clear = function() {
    this.$video[0].pause();
    this.$video[0].src = "";
    this.sv.setState("nomedia");
};

HTMLController.prototype.play = function() {
    this.$video[0].autoplay = true;
    this.$video[0].play();
};

HTMLController.prototype.setRepeat = function(a) {
    this.loop = a;
};

HTMLController.prototype.pause = function() {
    this.$video[0].autoplay = false;
    this.$video[0].pause();
};

HTMLController.prototype.seek = function(a) {
    this.$video[0].currentTime = a * this.$video[0].duration;
};

HTMLController.prototype.setMute = function(a) {
    if (a) {
        this.$video[0].volume = 0;
    } else {
        this.$video[0].volume = this.htmlVolume;
    }
};

HTMLController.prototype.setVolume = function(a) {
    this.$video[0].volume = this.htmlVolume = a;
};

HTMLController.prototype.setFullscreen = function(a) {
    if (a) {
        this.$video[0].controls = false;
        this.$video.addClass("fullscreen");
        this.sv.setState("fullscreen");
    } else {
        this.$video.removeClass("fullscreen");
        this.sv.setState("normalscreen");
    }
};

function FlashController(a) {
    this.sv = a;
    this.$flash = $(".sv_flashContainer", a.$element);
    this.flashId = a.$element[0].id + "_flash";
    this.flashVolume = a.volume;
    this.valid = false;
    this.flashLoaded = false;
    this.$flash[0].id = this.flashId;
    if (!swfobject.hasFlashPlayerVersion("10")) {
        $(".sv_display", this.sv.$element).remove();
        this.valid = false;
    } else {
        this.valid = true;
    }
}

FlashController.prototype.bindListeners = function() {};

FlashController.prototype.breakListeners = function() {};

FlashController.prototype.init = function(a) {
    if (!this.valid) {
        a();
        return;
    }
    var b = "/js/simplevideo/SimpleVideo.swf";
    var c = {
        playerId: this.sv.$element[0].id
    };
    var d = {
        allowScriptAccess: "always",
        menu: "false",
        wmode: "opaque"
    };
    var e = {
        id: this.flashId,
        name: this.flashId
    };
    this.initCallback = a;
    swfobject.embedSWF(b, this.flashId, "100%", "100%", "10", "/swfobject/expressInstall.swf", c, d, e);
};

FlashController.prototype.flashEvent = function(a, b) {
    switch (a) {
      case "TRACE":
        if (console) {}
        break;

      case "LOADING_VIDEO":
      case "BUFFER_EMPTY":
        this.sv.setState("buffering");
        break;

      case "FLASH_LOADED":
        this.flashLoaded = true;
        if (this.initCallback) {
            this.initCallback();
            this.initCallback = null;
        }
        break;

      case "BUFFER_FULL":
      case "PLAYING":
        this.sv.setState("playing");
        break;

      case "PAUSED":
        this.sv.setState("paused");
        break;

      case "LOAD_PROGRESS":
        this.sv.setState("load_progress", b);
        break;

      case "PLAYHEAD_CHANGE":
        this.sv.setState("play_progress", b);
        break;
    }
};

FlashController.prototype.setFile = function(a) {
    if (typeof this.$flash[0].callFunc == "undefined") {
        this.$flash = $(swfobject.getObjectById(this.flashId));
    }
    for (var b = 0, c = a.length; b < c; b++) {
        if (a[b].src.indexOf("mp4") > -1) {
            this.$flash[0].callFunc("load", {
                url: a[b].src
            });
            break;
        }
    }
};

FlashController.prototype.setPoster = function(a) {};

FlashController.prototype.clear = function() {
    this.$flash[0].callFunc("stopVideo");
    this.sv.setState("nomedia");
};

FlashController.prototype.play = function() {
    this.$flash[0].callFunc("playVideo");
    this.setVolume(this.sv.volume);
};

FlashController.prototype.setRepeat = function(a) {
    this.$flash[0].callFunc("setRepeat", {
        repeat: a
    });
};

FlashController.prototype.pause = function() {
    this.$flash[0].callFunc("pause");
};

FlashController.prototype.seek = function(a) {
    this.$flash[0].callFunc("seek", {
        percent: a
    });
};

FlashController.prototype.setMute = function(a) {
    if (a) {
        this.$flash[0].callFunc("mute");
        this.sv.setState("volume", {
            volume: 0
        });
    } else {
        this.$flash[0].callFunc("unmute");
        this.sv.setState("volume", {
            volume: this.flashVolume
        });
    }
};

FlashController.prototype.setVolume = function(a) {
    this.flashVolume = a;
    this.$flash[0].callFunc("setVolume", {
        volume: this.flashVolume
    });
    this.sv.setState("volume", {
        volume: this.flashVolume
    });
};

FlashController.prototype.setFullscreen = function(a) {
    if (a) {
        this.$flash.addClass("fullscreen");
        this.sv.setState("fullscreen");
    } else {
        this.$flash.removeClass("fullscreen");
        this.sv.setState("normalscreen");
    }
};

var api = function() {
    var a = {
        supportsFullScreen: false,
        isFullScreen: function() {
            return false;
        },
        requestFullScreen: function() {},
        cancelFullScreen: function() {},
        fullScreenEventName: "",
        prefix: ""
    }, b = "webkit moz o ms khtml".split(" ");
    if (typeof document.cancelFullScreen != "undefined") {
        a.supportsFullScreen = true;
    } else {
        for (var c = 0, d = b.length; c < d; c++) {
            a.prefix = b[c];
            if (typeof document[a.prefix + "CancelFullScreen"] != "undefined") {
                a.supportsFullScreen = true;
                break;
            }
        }
    }
    if (a.supportsFullScreen) {
        a.fullScreenEventName = a.prefix + "fullscreenchange";
        a.isFullScreen = function() {
            switch (this.prefix) {
              case "":
                return document.fullScreen;

              case "webkit":
                return document.webkitIsFullScreen;

              default:
                return document[this.prefix + "FullScreen"];
            }
        };
        a.requestFullScreen = function(a) {
            return this.prefix === "" ? a.requestFullScreen() : a[this.prefix + "RequestFullScreen"]();
        };
        a.cancelFullScreen = function(a) {
            return this.prefix === "" ? document.cancelFullScreen() : document[this.prefix + "CancelFullScreen"]();
        };
    }
    if (typeof jQuery != "undefined") {
        jQuery.fn.requestFullScreen = function() {
            return this.each(function() {
                if (a.supportsFullScreen) {
                    a.requestFullScreen(this);
                }
            });
        };
    }
    window.fullScreenApi = a;
}();